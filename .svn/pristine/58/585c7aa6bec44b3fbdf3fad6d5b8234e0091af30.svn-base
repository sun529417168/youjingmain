package com.youjing.yjeducation.util;

import android.annotation.SuppressLint;
import android.text.TextUtils;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;


/**
 * user  秦伟宁
 * Date 2016/3/24
 * Time 16:09
 */
@SuppressLint("SimpleDateFormat")
public class TimeUtil {

    public static String converTime(long time) {
        long currentSeconds = System.currentTimeMillis() / 1000;
        long timeGap = currentSeconds - time / 1000;// 与现在时间相差秒数
        String timeStr = null;
        if (timeGap > 3 * 24 * 60 * 60) {
            timeStr = getDayTime(time) + " " + getMinTime(time);
        } else if (timeGap > 24 * 2 * 60 * 60) {// 2天以上就返回标准时间
            timeStr = "前天 " + getMinTime(time);
        } else if (timeGap > 24 * 60 * 60) {// 1天-2天
            timeStr = timeGap / (24 * 60 * 60) + "昨天 " + getMinTime(time);
        } else if (timeGap > 60 * 60) {// 1小时-24小时
            timeStr = timeGap / (60 * 60) + "今天 " + getMinTime(time);
        } else if (timeGap > 60) {// 1分钟-59分钟
            timeStr = timeGap / 60 + "今天 " + getMinTime(time);
        } else {// 1秒钟-59秒钟
            timeStr = "今天 " + getMinTime(time);
        }
        return timeStr;
    }

    public static String getChatTime(long time) {
        return getMinTime(time);
    }

    public static String getPrefix(long time) {
        long currentSeconds = System.currentTimeMillis();
        long timeGap = currentSeconds - time;// 与现在时间差
        String timeStr = null;
        if (timeGap > 24 * 3 * 60 * 60 * 1000) {
            timeStr = getDayTime(time) + " " + getMinTime(time);
        } else if (timeGap > 24 * 2 * 60 * 60 * 1000) {
            timeStr = "前天 " + getMinTime(time);
        } else if (timeGap > 24 * 60 * 60 * 1000) {
            timeStr = "昨天 " + getMinTime(time);
        } else {
            timeStr = "今天 " + getMinTime(time);
        }
        return timeStr;
    }

    public static String getPrefixTime(long time) {
        long currentSeconds = System.currentTimeMillis();
        long timeGap = currentSeconds - time;// 与现在时间差
        String timeStr = null;
        if (timeGap > 24 * 3 * 60 * 60 * 1000) {
            timeStr = getDayTime(time) + " " + getMinTime(time);
        } else if (timeGap > 24 * 2 * 60 * 60 * 1000) {
            timeStr = "前天 " + getMinTime(time);
        } else if (timeGap > 24 * 60 * 60 * 1000) {
            timeStr = "昨天 " + getMinTime(time);
        } else {
            timeStr = "今天 " + getMinTime(time);
        }
        return timeStr;
    }

    public static String getDayTime(long time) {
        SimpleDateFormat format = new SimpleDateFormat("yy-MM-dd");
        return format.format(new Date(time));
    }

    public static String getYearTime(long time) {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        return format.format(new Date(time));
    }
    public static String getMinTime(long time) {
        SimpleDateFormat format = new SimpleDateFormat("yy-MM-dd HH:mm");
        return format.format(new Date(time));
    }

    public static String getTime(long time) {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        return format.format(new Date(time));
    }

    public static String getMonthTime(long time) {
        SimpleDateFormat format = new SimpleDateFormat("MM-dd");
        return format.format(new Date(time));
    }

    public static String getSecondTime(long time) {
        SimpleDateFormat format = new SimpleDateFormat("MM-dd HH:mm");
        return format.format(new Date(time));
    }

    public static String getSecondMInTime(long time) {
        SimpleDateFormat format = new SimpleDateFormat("HH:mm");
        return format.format(new Date(time));
    }
    public static String getSecondMInTimeT(long time) {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return format.format(new Date(time));
    }
    public static String getMonth(long time) {
        SimpleDateFormat format = new SimpleDateFormat("MM");
        return format.format(new Date(time));
    }

    public static String getDay(long time) {
        SimpleDateFormat format = new SimpleDateFormat("dd");
        return format.format(new Date(time));
    }

    /**
     * 格式化显示时长，参数为string
     *
     * @param durationInSecond
     * @return
     */
    public static String displayDuration(String durationInSecond) {
        long duration = Long.parseLong(durationInSecond);
        if (duration < 0) {
            return "";
        }
        SimpleDateFormat sdf = new SimpleDateFormat("mm:ss");
        return sdf.format(new Date(duration * 1000));
    }

    /**
     * 格式化显示时长，参数为long型
     *
     * @param duration
     * @return
     */
    public static String displayDuration(long duration) {
        if (duration < 0) {
            return "";
        }
        SimpleDateFormat sdf = new SimpleDateFormat("mm:ss");
        return sdf.format(new Date(duration * 1000));
    }

    public static String displayHHMMSS(int durationInSecond) {
        String display = "";
        String semicolon = ":";
        int h = durationInSecond / (60 * 60);
        int hs = durationInSecond % (60 * 60);
        int m = hs / 60;
        int s = hs % 60;
        String hours = "%d";
        String minute = "%d";
        String seconds = "%d";
        if (h < 10) {
            hours = "0" + hours;
        }
        if (m < 10) {
            minute = "0" + minute;
        }
        if (s < 10) {
            seconds = "0" + seconds;
        }
        display = hours + semicolon + minute + semicolon + seconds;
        return String.format(display, h, m, s);
    }

    /**
     * 将秒数转化为时间格式
     *
     * @param durationInSeconds 单位是秒
     * @return
     */
    public static String displayHHMMSS(String durationInSeconds) {
        if (TextUtils.isEmpty(durationInSeconds))
            return null;
        if (durationInSeconds.contains("."))
            durationInSeconds = durationInSeconds.substring(0, durationInSeconds.indexOf("."));
        int seconds = Integer.valueOf(durationInSeconds);
        return displayHHMMSS(seconds);
    }

    /**
     * 格式化显示时间  参数为long型
     *
     * @param timestamp
     * @return
     */
    public static String displayTime(long timestamp) {
        if (timestamp < 0) {
            return "";
        }
        SimpleDateFormat mh = new SimpleDateFormat("MM-dd HH:mm");
        String timeStr = mh.format(timestamp);
        return timeStr.substring(0, timeStr.length());
    }

    /**
     * 格式化显示时间，参数为string
     *
     * @param times
     * @return
     */
    public static String displayTime(String times) {
        long timestamp = Long.parseLong(times) * 1000;
        return displayTime(timestamp);
    }


    public static String getTimeFromInt(int time) {
        if (time <= 0) {
            return "0:00";
        }
        int secondnd = (time / 1000) / 60;
        int million = (time / 1000) % 60;
        String f = String.valueOf(secondnd);
        String m = million >= 10 ? String.valueOf(million) : "0"
                + String.valueOf(million);
        return f + ":" + m;
    }

    public static String getTimeFromInt_(int time) {
        if (time <= 0) {
            return "0:00";
        }
        int secondnd = (time ) / 60;
        int million = (time ) % 60;
        String f = String.valueOf(secondnd);
        String m = million >= 10 ? String.valueOf(million) : "0"
                + String.valueOf(million);
        return f + ":" + m;
    }
    // 获取当前日期
    public static String getCurrentTime() {
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        return s.format(new Date());
    }

    // 获取当前日期
    public static String getCurrentTimeNow() {
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return s.format(new Date());
    }

    // 计算 始末日期差
    public static int compareTime(String start, String end) {
        long between_days = 0;
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Calendar cal = Calendar.getInstance();
            cal.setTime(sdf.parse(start));
            long time1 = cal.getTimeInMillis();
            cal.setTime(sdf.parse(end));
            long time2 = cal.getTimeInMillis();
            between_days = (time2 - time1) / (1000 * 3600 * 24);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return Integer.parseInt(String.valueOf(between_days));
    }

    // 计算多少时间前
    public static String timeAgo(long time) {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            Date d1 = df.parse(getCurrentTimeNow());
            Date d2 = df.parse(getSecondMInTimeT(time));
            //Date   d2 = new   Date(System.currentTimeMillis());//你也可以获取当前时间
            long diff = d1.getTime() - d2.getTime();//这样得到的差值是微秒级别
            long days = diff / (1000 * 60 * 60 * 24);
            long hours = (diff - days * (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);
            long minutes = (diff - days * (1000 * 60 * 60 * 24) - hours * (1000 * 60 * 60)) / (1000 * 60);
            return days+","+hours+","+minutes;
        } catch (Exception e) {
        }
        return "";
    }
}